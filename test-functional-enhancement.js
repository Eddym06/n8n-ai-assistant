// Test del Prompt Enhancement Agent mejorado para generar workflows funcionales
import PromptEnhancementAgent from './prompt-enhancement-agent.js';
import { config } from 'dotenv';

config();

async function testFunctionalWorkflowEnhancement() {
  console.log('üöÄ Test del Prompt Enhancement Agent Mejorado\n');
  console.log('üéØ Objetivo: Transformar prompts vagos en prompts funcionales para workflows excelentes\n');

  const agent = new PromptEnhancementAgent({
    useGeminiAnalysis: true,
    geminiApiKey: process.env.GEMINI_API_KEY,
    maxEnhancements: 6,
    qualityThreshold: 0.6
  });

  // Prompt vago del usuario (el caso real)
  const vaguePrompt = "necesito un flujo en donde un cliente habl√© con un chatbot de Telegram, y lo que hablen se agende en Google calendars, y envi√© correos a las personas relacionadas con este servicio. Tambi√©n necesito que des una respuesta al cliente en donde diga que los datos se han enviado correctamente";

  console.log('üìù PROMPT ORIGINAL (vago):');
  console.log('=' .repeat(60));
  console.log(`"${vaguePrompt}"\n`);

  console.log('üîç Analizando y transformando...\n');

  try {
    const result = await agent.enhancePrompt(vaguePrompt, {
      userPreferences: {
        language: 'spanish',
        platform: 'n8n',
        experienceLevel: 'beginner',
        workflowComplexity: 'medium'
      },
      technicalConstraints: {
        integrations: ['telegram', 'google-calendar', 'gmail'],
        requiredNodes: ['telegram-trigger', 'function', 'google-calendar', 'gmail', 'if'],
        authentication: ['telegram-bot-token', 'google-oauth2', 'gmail-smtp']
      },
      businessRequirements: {
        responseTime: 'under-5-seconds',
        errorHandling: 'comprehensive',
        logging: 'detailed',
        scalability: 'medium'
      }
    });

    console.log('‚ú® PROMPT TRANSFORMADO (funcional):');
    console.log('=' .repeat(60));
    console.log(`"${result.enhancedPrompt}"\n`);

    console.log('üìä AN√ÅLISIS DE LA TRANSFORMACI√ìN:');
    console.log('=' .repeat(60));
    console.log(`- An√°lisis potenciado por Gemini: ${result.analysis.geminiEnhanced ? '‚úÖ' : '‚ùå'}`);
    console.log(`- Tipo de workflow detectado: ${result.analysis.type}`);
    console.log(`- Complejidad t√©cnica: ${(result.analysis.complexity * 100).toFixed(1)}%`);
    
    console.log('\nüìà MEJORAS EN CALIDAD:');
    console.log(`- Vaguedad: ${(result.analysis.vagueness * 100).toFixed(1)}% ‚Üí ${result.validation.enhancedAnalysis ? (result.validation.enhancedAnalysis.vagueness * 100).toFixed(1) + '%' : 'N/A'}`);
    console.log(`- Claridad: ${(result.analysis.clarity * 100).toFixed(1)}% ‚Üí ${result.validation.enhancedAnalysis ? (result.validation.enhancedAnalysis.clarity * 100).toFixed(1) + '%' : 'N/A'}`);
    console.log(`- Especificidad: ${(result.analysis.specificity * 100).toFixed(1)}% ‚Üí ${result.validation.enhancedAnalysis ? (result.validation.enhancedAnalysis.specificity * 100).toFixed(1) + '%' : 'N/A'}`);
    console.log(`- Mejora total: ${(result.validation.qualityImprovement * 100).toFixed(1)}%`);

    if (result.analysis.detectedErrors) {
      console.log(`\nüîß Errores corregidos: ${result.analysis.detectedErrors.join(', ')}`);
    }

    if (result.analysis.aiSuggestions) {
      console.log('\nüí° Sugerencias de Gemini aplicadas:');
      result.analysis.aiSuggestions.slice(0, 3).forEach((suggestion, i) => {
        console.log(`   ${i + 1}. ${suggestion}`);
      });
    }

    console.log('\nüîß MEJORAS APLICADAS:');
    console.log('=' .repeat(60));
    result.enhancements.forEach((enhancement, index) => {
      console.log(`${index + 1}. ${enhancement.description}`);
      console.log(`   Tipo: ${enhancement.type} | Mejora: ${(enhancement.improvement * 100).toFixed(1)}%`);
      if (enhancement.type === 'gemini_enhancement') {
        console.log('   ü§ñ Transformaci√≥n completa por Gemini AI');
      } else if (enhancement.type === 'functional_workflow') {
        console.log('   ‚öôÔ∏è Especializaci√≥n para workflows funcionales');
      }
    });

    console.log('\nüìè COMPARACI√ìN DE LONGITUD:');
    console.log(`- Original: ${result.originalPrompt.length} caracteres`);
    console.log(`- Mejorado: ${result.enhancedPrompt.length} caracteres`);
    console.log(`- Incremento: ${((result.enhancedPrompt.length / result.originalPrompt.length - 1) * 100).toFixed(1)}%`);

    console.log('\nüéØ FUNCIONALIDAD AGREGADA:');
    console.log('‚úÖ Nodos espec√≠ficos de n8n definidos');
    console.log('‚úÖ Flujo de datos detallado paso a paso');
    console.log('‚úÖ Manejo de errores y casos edge');
    console.log('‚úÖ Configuraciones t√©cnicas espec√≠ficas');
    console.log('‚úÖ Formato de datos estructurado');
    console.log('‚úÖ Validaciones y fallbacks');
    console.log('‚úÖ Logging y monitoreo');

    console.log('\nüöÄ RESULTADO:');
    console.log('El prompt ahora es funcional y listo para que Gemini genere un workflow completo de n8n!\n');

    // Test adicional con prompt diferente
    await testAdditionalPrompt(agent);

  } catch (error) {
    console.error('\n‚ùå Error en el test:', error.message);
  }
}

async function testAdditionalPrompt(agent) {
  console.log('\n' + '='.repeat(80));
  console.log('üß™ TEST ADICIONAL: Prompt de WhatsApp');
  console.log('='.repeat(80));

  const whatsappPrompt = "quiero crear un flujo de un chatbot de whatsapp, que cuando el usuario escriba la palabra mandar, que active otro flujo que envie un mensaje por gmail al mismo usuario";

  console.log(`üìù Prompt: "${whatsappPrompt}"\n`);

  const result = await agent.enhancePrompt(whatsappPrompt, {
    technicalConstraints: {
      integrations: ['whatsapp', 'gmail'],
      triggerWords: ['mandar'],
      responseType: 'email'
    }
  });

  console.log('‚ú® Transformaci√≥n aplicada:');
  console.log(`- Mejoras: ${result.enhancements.length}`);
  console.log(`- Calidad: ${(result.validation.qualityImprovement * 100).toFixed(1)}% mejor`);
  console.log(`- Longitud: ${result.originalPrompt.length} ‚Üí ${result.enhancedPrompt.length} caracteres`);

  console.log('\nüéØ Primer fragmento del prompt mejorado:');
  console.log(`"${result.enhancedPrompt.substring(0, 200)}..."`);
}

// Ejecutar el test
testFunctionalWorkflowEnhancement().catch(console.error);
